<?php

/**
 * @file
 * Functions to support theming in the B5 Subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function b5subtheme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function b5subtheme_preprocess_page(&$variables) {
  // Add custom variables to page template.
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
}

/**
 * Implements hook_preprocess_HOOK() for node templates.
 */
function b5subtheme_preprocess_node(&$variables) {
  $node = $variables['node'];
  $variables['content_type'] = $node->getType();
  $variables['view_mode'] = $variables['elements']['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function b5subtheme_preprocess_block(&$variables) {
  // Add block region to block variables.
  if (isset($variables['elements']['#id'])) {
    $block = \Drupal\block\Entity\Block::load($variables['elements']['#id']);
    if ($block) {
      $variables['region'] = $block->getRegion();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for field templates.
 */
function b5subtheme_preprocess_field(&$variables) {
  $element = $variables['element'];
  $variables['bundle'] = $element['#bundle'];
  $variables['entity_type'] = $element['#entity_type'];
}

/**
 * Implements hook_form_alter().
 */
function b5subtheme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom form modifications here.
  if ($form_id == 'search_block_form') {
    $form['keys']['#attributes']['placeholder'] = t('Search...');
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu templates.
 */
function b5subtheme_preprocess_menu(&$variables) {
  // Only process the main menu
  if (isset($variables['menu_name']) && $variables['menu_name'] == 'main') {
    // Get the full menu tree with all children
    $menu_tree = \Drupal::service('menu.link_tree');
    
    // Set parameters to load all items with children
    $parameters = new \Drupal\Core\Menu\MenuTreeParameters();
    $parameters->setMinDepth(1);
    $parameters->setMaxDepth(2); // Load 2 levels
    $parameters->onlyEnabledLinks();
    
    // Load the tree
    $tree = $menu_tree->load('main', $parameters);
    
    // Apply manipulators
    $manipulators = [
      ['callable' => 'menu.default_tree_manipulators:checkNodeAccess'],
      ['callable' => 'menu.default_tree_manipulators:checkAccess'],
      ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
    ];
    $tree = $menu_tree->transform($tree, $manipulators);
    
    // Build the tree
    $build = $menu_tree->build($tree);
    
    // Replace the items with our fully loaded tree
    if (!empty($build['#items'])) {
      $variables['items'] = $build['#items'];
      
      // Ensure all parent items are marked as expanded
      foreach ($variables['items'] as &$item) {
        if (!empty($item['below'])) {
          $item['is_expanded'] = TRUE;
        }
      }
    }
  }
}