/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/scripts.js":
/*!***********************!*\
  !*** ./js/scripts.js ***!
  \***********************/
/***/ (() => {

eval("document.addEventListener('DOMContentLoaded', function () {\n  // ==========================================\n  // HELP OVERLAY\n  // ==========================================\n\n  var helpToggle = document.getElementById('helpToggle');\n  var helpOverlay = document.getElementById('helpOverlay');\n  var helpBackdrop = document.getElementById('helpOverlayBackdrop');\n  if (helpToggle && helpOverlay && helpBackdrop) {\n    helpOverlay.setAttribute('aria-hidden', 'true');\n    helpToggle.setAttribute('aria-expanded', 'false');\n    helpToggle.addEventListener('click', function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      // Toggle the class\n      var active = helpOverlay.classList.toggle('show-overlay');\n\n      // Force inline styles as a failsafe\n      if (active) {\n        helpOverlay.style.setProperty('display', 'block', 'important');\n        helpOverlay.style.setProperty('opacity', '1', 'important');\n        helpOverlay.style.setProperty('visibility', 'visible', 'important');\n        helpOverlay.style.setProperty('pointer-events', 'auto', 'important');\n        var panel = helpOverlay.querySelector('.help-panel');\n        if (panel) {\n          panel.style.setProperty('right', '5%', 'important');\n        }\n      } else {\n        helpOverlay.style.removeProperty('display');\n        helpOverlay.style.removeProperty('opacity');\n        helpOverlay.style.removeProperty('visibility');\n        helpOverlay.style.removeProperty('pointer-events');\n        var _panel = helpOverlay.querySelector('.help-panel');\n        if (_panel) {\n          _panel.style.removeProperty('right');\n        }\n      }\n\n      // Update ARIA attributes\n      helpOverlay.setAttribute('aria-hidden', String(!active));\n      helpToggle.setAttribute('aria-expanded', String(active));\n    });\n    helpBackdrop.addEventListener('click', function () {\n      helpOverlay.classList.remove('show-overlay');\n\n      // Remove inline styles\n      helpOverlay.style.removeProperty('display');\n      helpOverlay.style.removeProperty('opacity');\n      helpOverlay.style.removeProperty('visibility');\n      helpOverlay.style.removeProperty('pointer-events');\n      var panel = helpOverlay.querySelector('.help-panel');\n      if (panel) {\n        panel.style.removeProperty('right');\n      }\n      helpOverlay.setAttribute('aria-hidden', 'true');\n      helpToggle.setAttribute('aria-expanded', 'false');\n    });\n  }\n\n  // ==========================================\n  // UTILITY BAR HOVER FIX\n  // ==========================================\n  // Fix hover functionality for utility bar items with Bootstrap text-white class\n  var utilityBarItems = document.querySelectorAll('.utility-bar .hotline > a, .utility-bar .search-col > button, .utility-bar .exit-link > a, .utility-bar .get-help > button');\n  utilityBarItems.forEach(function (item) {\n    // Store original styles\n    var originalStyles = {\n      backgroundColor: item.style.backgroundColor || '',\n      color: item.style.color || ''\n    };\n\n    // Handle mouse enter\n    item.addEventListener('mouseenter', function () {\n      // Override inline styles during hover\n      this.style.setProperty('background-color', '#fff', 'important');\n      this.style.setProperty('color', '#1263a0', 'important');\n\n      // Also update all child elements\n      var allElements = this.querySelectorAll('*');\n      allElements.forEach(function (el) {\n        el.style.setProperty('color', '#1263a0', 'important');\n      });\n    });\n\n    // Handle mouse leave\n    item.addEventListener('mouseleave', function () {\n      // Restore original styles\n      this.style.backgroundColor = originalStyles.backgroundColor;\n      this.style.color = originalStyles.color;\n\n      // Remove inline styles from child elements\n      var allElements = this.querySelectorAll('*');\n      allElements.forEach(function (el) {\n        el.style.color = '';\n      });\n    });\n\n    // Handle focus\n    item.addEventListener('focus', function () {\n      this.style.setProperty('background-color', '#fff', 'important');\n      this.style.setProperty('color', '#1263a0', 'important');\n      var allElements = this.querySelectorAll('*');\n      allElements.forEach(function (el) {\n        el.style.setProperty('color', '#1263a0', 'important');\n      });\n    });\n\n    // Handle blur\n    item.addEventListener('blur', function () {\n      this.style.backgroundColor = originalStyles.backgroundColor;\n      this.style.color = originalStyles.color;\n      var allElements = this.querySelectorAll('*');\n      allElements.forEach(function (el) {\n        el.style.color = '';\n      });\n    });\n  });\n\n  // ==========================================\n  // BUTTON TEXT COLOR FIX\n  // ==========================================\n  // Ensure white text is visible on primary and success buttons\n  var primaryButtons = document.querySelectorAll('.btn-primary, .btn-success');\n  primaryButtons.forEach(function (button) {\n    // Set initial white color\n    if (button.classList.contains('btn-primary') || button.classList.contains('btn-success')) {\n      // Force white text color for non-hover state\n      if (!button.matches(':hover')) {\n        button.style.setProperty('color', '#fff', 'important');\n\n        // Also update all child elements\n        var allElements = button.querySelectorAll('*');\n        allElements.forEach(function (el) {\n          el.style.setProperty('color', '#fff', 'important');\n        });\n      }\n    }\n\n    // Handle hover states for primary buttons\n    if (button.classList.contains('btn-primary')) {\n      button.addEventListener('mouseenter', function () {\n        this.style.setProperty('color', '#1263a0', 'important');\n        var allElements = this.querySelectorAll('*');\n        allElements.forEach(function (el) {\n          el.style.setProperty('color', '#1263a0', 'important');\n        });\n      });\n      button.addEventListener('mouseleave', function () {\n        this.style.setProperty('color', '#fff', 'important');\n        var allElements = this.querySelectorAll('*');\n        allElements.forEach(function (el) {\n          el.style.setProperty('color', '#fff', 'important');\n        });\n      });\n    }\n\n    // Success buttons keep white text on hover\n    if (button.classList.contains('btn-success')) {\n      button.addEventListener('mouseenter', function () {\n        this.style.setProperty('color', '#fff', 'important');\n        var allElements = this.querySelectorAll('*');\n        allElements.forEach(function (el) {\n          el.style.setProperty('color', '#fff', 'important');\n        });\n      });\n      button.addEventListener('mouseleave', function () {\n        this.style.setProperty('color', '#fff', 'important');\n        var allElements = this.querySelectorAll('*');\n        allElements.forEach(function (el) {\n          el.style.setProperty('color', '#fff', 'important');\n        });\n      });\n    }\n  });\n\n  // ==========================================\n  // SEARCH TOGGLE\n  // ==========================================\n  var toggleBtn = document.getElementById('searchToggle');\n  var searchForm = document.getElementById('searchForm');\n  if (toggleBtn && searchForm) {\n    searchForm.style.display = 'none';\n    toggleBtn.setAttribute('aria-expanded', 'false');\n    searchForm.setAttribute('aria-hidden', 'true');\n    toggleBtn.addEventListener('click', function () {\n      var isHidden = window.getComputedStyle(searchForm).display === 'none';\n      searchForm.style.display = isHidden ? 'inline-block' : 'none';\n      toggleBtn.setAttribute('aria-expanded', String(isHidden));\n      searchForm.setAttribute('aria-hidden', String(!isHidden));\n    });\n  }\n\n  // ==========================================\n  // IMPACT CARDS FLIP + A11Y - ENHANCED VERSION\n  // ==========================================\n\n  /**\n   * Check if device is mobile/tablet\n   */\n  function isMobileDevice() {\n    var isMobile = window.innerWidth < 768;\n    return isMobile;\n  }\n\n  /**\n   * Check if a card has back content (more reliable detection)\n   */\n  function hasBackContent(card) {\n    var backDetail = card.querySelector('.impact-card__back-detail');\n    if (!backDetail) return false;\n    var content = backDetail.textContent || backDetail.innerText || '';\n    return content.trim().length > 0;\n  }\n\n  /**\n   * Get close button from card\n   */\n  function getCloseButton(card) {\n    return card.querySelector('.impact-card__back-close');\n  }\n\n  /**\n   * Flip a card to the specified state\n   */\n  function flipCard(card, shouldFlip) {\n    if (shouldFlip) {\n      card.classList.add('is-flipped');\n      card.setAttribute('aria-expanded', 'true');\n\n      // Focus management for accessibility\n      setTimeout(function () {\n        var closeButton = card.querySelector('.impact-card__back-close');\n        if (closeButton) {\n          closeButton.focus();\n        }\n      }, 250); // Wait for flip animation\n    } else {\n      card.classList.remove('is-flipped');\n      card.setAttribute('aria-expanded', 'false');\n\n      // Return focus to the card itself\n      setTimeout(function () {\n        card.focus();\n      }, 100);\n    }\n  }\n\n  /**\n   * Handle card click events\n   */\n  function handleCardClick(event) {\n    var card = event.currentTarget;\n\n    // On mobile, completely disable flip functionality and ensure links work\n    if (isMobileDevice()) {\n      // Remove any flip classes that might be present\n      card.classList.remove('is-flipped');\n\n      // Allow links to work normally - don't prevent default\n      var clickedLink = event.target.closest('a');\n      if (clickedLink && clickedLink.getAttribute('href')) {\n        // Let the browser handle the link navigation normally\n        return;\n      }\n\n      // If not clicking a link, do nothing on mobile\n      return;\n    }\n\n    // Desktop flip functionality below this point\n\n    // If clicking on the close button, only close the card\n    if (event.target.closest('.impact-card__back-close')) {\n      event.stopPropagation();\n      flipCard(card, false);\n      return;\n    }\n\n    // Don't flip if clicking on links or buttons in flipped state\n    if (card.classList.contains('is-flipped')) {\n      var target = event.target;\n      if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.closest('a, button')) {\n        return; // Allow the link/button to work normally\n      }\n    }\n\n    // For front-side links, prevent navigation and flip instead\n    var frontLink = event.target.closest('.card-front a');\n    if (frontLink && !card.classList.contains('is-flipped')) {\n      event.preventDefault();\n      event.stopPropagation();\n      flipCard(card, true);\n      return;\n    }\n\n    // Otherwise toggle flip state\n    event.preventDefault();\n    event.stopPropagation();\n    var isCurrentlyFlipped = card.classList.contains('is-flipped');\n    flipCard(card, !isCurrentlyFlipped);\n  }\n\n  /**\n   * Handle keyboard events for accessibility\n   */\n  function handleCardKeydown(event) {\n    var card = event.currentTarget;\n\n    // Disable keyboard flip functionality on mobile\n    if (isMobileDevice()) {\n      return;\n    }\n\n    // Handle Enter and Space keys\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      var isCurrentlyFlipped = card.classList.contains('is-flipped');\n      flipCard(card, !isCurrentlyFlipped);\n    }\n\n    // Handle Escape key to close flipped cards\n    if (event.key === 'Escape' && card.classList.contains('is-flipped')) {\n      event.preventDefault();\n      flipCard(card, false);\n    }\n  }\n\n  /**\n   * Set up mobile-specific card behavior\n   */\n  function setupMobileCard(card) {\n    // Remove any flip-related classes and attributes\n    card.classList.remove('is-flipped');\n    card.removeAttribute('role');\n    card.removeAttribute('tabindex');\n    card.removeAttribute('aria-expanded');\n\n    // Add mobile-specific class for styling\n    card.classList.add('mobile-card');\n\n    // Ensure the card behaves as a normal clickable element\n    card.style.cursor = 'pointer';\n\n    // Find the main link inside the card\n    var cardLink = card.querySelector('.impact-card__link');\n    if (cardLink) {\n      // Ensure the link is clickable and has proper styling\n      cardLink.style.pointerEvents = 'auto';\n      cardLink.style.display = 'block';\n      cardLink.style.width = '100%';\n      cardLink.style.height = '100%';\n\n      // Remove any existing click handlers on the card itself\n      card.onclick = null;\n\n      // Optional: Add click handler to entire card that triggers the link\n      card.addEventListener('click', function (e) {\n        // If we didn't click directly on the link, trigger it\n        if (e.target !== cardLink && !cardLink.contains(e.target)) {\n          e.preventDefault();\n          cardLink.click();\n        }\n      });\n    }\n\n    // Remove any flip-related event listeners by cloning the node\n    var newCard = card.cloneNode(true);\n    card.parentNode.replaceChild(newCard, card);\n\n    // Re-setup the click handler on the new card\n    var newCardLink = newCard.querySelector('.impact-card__link');\n    if (newCardLink) {\n      newCard.addEventListener('click', function (e) {\n        if (e.target !== newCardLink && !newCardLink.contains(e.target)) {\n          e.preventDefault();\n          newCardLink.click();\n        }\n      });\n    }\n  }\n\n  /**\n   * Initialize impact cards\n   */\n  function initializeCards() {\n    document.querySelectorAll('.impact-card').forEach(function (card) {\n      // Clean up any existing event listeners and attributes\n      card.removeAttribute('role');\n      card.removeAttribute('tabindex');\n      card.removeAttribute('aria-expanded');\n      card.classList.remove('is-flipped');\n\n      // On mobile, set up cards as normal clickable links\n      if (isMobileDevice()) {\n        setupMobileCard(card);\n        return; // Skip flip functionality setup on mobile\n      }\n\n      // Desktop setup - only add flip functionality if card has back content\n      if (!hasBackContent(card)) {\n        return; // Skip cards without back content - let them work as normal links\n      }\n\n      // Set up accessibility attributes for flippable cards (desktop only)\n      card.setAttribute('tabindex', '0');\n      card.setAttribute('role', 'button');\n      card.setAttribute('aria-expanded', 'false');\n\n      // Get close button\n      var closeBtn = getCloseButton(card);\n\n      // Add main card event listeners\n      card.addEventListener('click', handleCardClick);\n      card.addEventListener('keydown', handleCardKeydown);\n\n      // Add close button event listener\n      if (closeBtn) {\n        closeBtn.addEventListener('click', function (e) {\n          e.preventDefault();\n          e.stopPropagation();\n          flipCard(card, false);\n        });\n      }\n    });\n  }\n\n  // Initialize cards on page load\n  initializeCards();\n\n  /**\n   * Close all flipped cards (utility function)\n   */\n  function closeAllFlippedCards() {\n    var flippedCards = document.querySelectorAll('.impact-card.is-flipped');\n    flippedCards.forEach(function (card) {\n      return flipCard(card, false);\n    });\n  }\n\n  // ==========================================\n  // GLOBAL EVENT HANDLERS\n  // ==========================================\n\n  // Close flipped cards when clicking outside\n  document.addEventListener('click', function (event) {\n    var clickedCard = event.target.closest('.impact-card');\n    if (!clickedCard && !isMobileDevice()) {\n      closeAllFlippedCards();\n    }\n  });\n\n  // Close flipped cards on Escape key (global) - desktop only\n  document.addEventListener('keydown', function (event) {\n    if (event.key === 'Escape' && !isMobileDevice()) {\n      closeAllFlippedCards();\n    }\n  });\n\n  // Handle window resize - reinitialize cards when switching between mobile/desktop\n  var resizeTimeout;\n  window.addEventListener('resize', function () {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(function () {\n      // Close all flipped cards when resizing\n      closeAllFlippedCards();\n\n      // Completely reinitialize all cards with proper mobile/desktop behavior\n      initializeCards();\n    }, 250);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/scripts.js\n");

/***/ }),

/***/ "./scss/style.scss":
/*!*************************!*\
  !*** ./scss/style.scss ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zY3NzL3N0eWxlLnNjc3MiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYjVzdWJ0aGVtZS8uL3Njc3Mvc3R5bGUuc2Nzcz9kNTU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scss/style.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/scripts.min": 0,
/******/ 			"css/style": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkb5subtheme"] = self["webpackChunkb5subtheme"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/style"], () => (__webpack_require__("./js/scripts.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/style"], () => (__webpack_require__("./scss/style.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;