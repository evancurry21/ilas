<?php

/**
 * @file
 * ILAS Events Management module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function ilas_events_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ilas_events':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The ILAS Events Management module provides comprehensive event management capabilities integrated with CiviCRM.') . '</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Legal clinic scheduling and registration') . '</li>';
      $output .= '<li>' . t('CLE training management') . '</li>';
      $output .= '<li>' . t('Fundraising event coordination') . '</li>';
      $output .= '<li>' . t('Volunteer training sessions') . '</li>';
      $output .= '<li>' . t('Online registration and payment') . '</li>';
      $output .= '<li>' . t('Automated communications') . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function ilas_events_theme() {
  return [
    'event_listing' => [
      'variables' => [
        'events' => [],
        'filters' => [],
        'view_mode' => 'teaser',
      ],
      'template' => 'event-listing',
    ],
    'event_registration_form' => [
      'variables' => [
        'event' => NULL,
        'form' => NULL,
        'spots_available' => NULL,
      ],
      'template' => 'event-registration-form',
    ],
    'event_calendar' => [
      'variables' => [
        'events' => [],
        'month' => NULL,
        'year' => NULL,
      ],
      'template' => 'event-calendar',
    ],
    'event_confirmation' => [
      'variables' => [
        'event' => NULL,
        'participant' => NULL,
        'qr_code' => NULL,
      ],
      'template' => 'event-confirmation',
    ],
    'event_certificate' => [
      'variables' => [
        'event' => NULL,
        'participant' => NULL,
        'credits' => NULL,
        'date_issued' => NULL,
      ],
      'template' => 'event-certificate',
    ],
  ];
}

/**
 * Implements hook_cron().
 */
function ilas_events_cron() {
  // Send event reminders
  $reminder_service = \Drupal::service('ilas_events.reminder');
  $reminder_service->sendPendingReminders();
  
  // Update event statuses
  $event_manager = \Drupal::service('ilas_events.manager');
  $event_manager->updateEventStatuses();
  
  // Process waitlist
  $event_manager->processWaitlists();
}

/**
 * Implements hook_node_insert().
 */
function ilas_events_node_insert(EntityInterface $node) {
  if ($node->bundle() == 'event') {
    // Sync to CiviCRM
    $sync_service = \Drupal::service('ilas_events.sync');
    $sync_service->syncNodeToEvent($node);
  }
}

/**
 * Implements hook_node_update().
 */
function ilas_events_node_update(EntityInterface $node) {
  if ($node->bundle() == 'event') {
    // Update in CiviCRM
    $sync_service = \Drupal::service('ilas_events.sync');
    $sync_service->syncNodeToEvent($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function ilas_events_node_delete(EntityInterface $node) {
  if ($node->bundle() == 'event') {
    // Cancel event in CiviCRM (don't delete to preserve history)
    $sync_service = \Drupal::service('ilas_events.sync');
    $sync_service->cancelEventFromNode($node);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_event_form.
 */
function ilas_events_form_node_event_form_alter(&$form, FormStateInterface $form_state) {
  // Add CiviCRM event settings
  $form['civicrm_settings'] = [
    '#type' => 'details',
    '#title' => t('Event Registration Settings'),
    '#group' => 'advanced',
    '#weight' => 100,
  ];
  
  $form['civicrm_settings']['enable_registration'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable online registration'),
    '#default_value' => TRUE,
  ];
  
  $form['civicrm_settings']['max_participants'] = [
    '#type' => 'number',
    '#title' => t('Maximum participants'),
    '#min' => 0,
    '#default_value' => 50,
    '#description' => t('Leave empty for unlimited.'),
  ];
  
  $form['civicrm_settings']['registration_deadline'] = [
    '#type' => 'datetime',
    '#title' => t('Registration deadline'),
    '#description' => t('After this date, online registration will be closed.'),
  ];
  
  $form['civicrm_settings']['event_type'] = [
    '#type' => 'select',
    '#title' => t('Event type'),
    '#options' => ilas_events_get_event_types(),
    '#required' => TRUE,
  ];
  
  $form['civicrm_settings']['is_paid'] = [
    '#type' => 'checkbox',
    '#title' => t('This is a paid event'),
  ];
  
  $form['civicrm_settings']['registration_fee'] = [
    '#type' => 'number',
    '#title' => t('Registration fee'),
    '#min' => 0,
    '#step' => 0.01,
    '#states' => [
      'visible' => [
        ':input[name="is_paid"]' => ['checked' => TRUE],
      ],
    ],
  ];
  
  // Add validation
  $form['#validate'][] = 'ilas_events_node_event_form_validate';
}

/**
 * Validation for event node form.
 */
function ilas_events_node_event_form_validate($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  
  // Validate registration deadline
  if (!empty($values['registration_deadline'])) {
    $deadline = strtotime($values['registration_deadline']);
    $event_date = strtotime($values['field_event_date'][0]['value']);
    
    if ($deadline > $event_date) {
      $form_state->setErrorByName('registration_deadline', t('Registration deadline cannot be after the event date.'));
    }
  }
  
  // Validate paid event settings
  if ($values['is_paid'] && empty($values['registration_fee'])) {
    $form_state->setErrorByName('registration_fee', t('Registration fee is required for paid events.'));
  }
}

/**
 * Get available event types.
 */
function ilas_events_get_event_types() {
  static $types = NULL;
  
  if ($types === NULL) {
    try {
      \Drupal::service('civicrm')->initialize();
      
      $result = civicrm_api3('OptionValue', 'get', [
        'option_group_id' => 'event_type',
        'is_active' => 1,
        'options' => ['limit' => 0],
      ]);
      
      $types = [];
      foreach ($result['values'] as $type) {
        $types[$type['value']] = $type['label'];
      }
      
      // Add custom types for legal aid
      $custom_types = [
        'legal_clinic' => t('Legal Clinic'),
        'cle_training' => t('CLE Training'),
        'volunteer_training' => t('Volunteer Training'),
        'pro_bono_recruitment' => t('Pro Bono Recruitment'),
        'community_outreach' => t('Community Outreach'),
      ];
      
      $types = array_merge($types, $custom_types);
    }
    catch (\Exception $e) {
      \Drupal::logger('ilas_events')->error('Failed to load event types: @error', [
        '@error' => $e->getMessage(),
      ]);
      
      $types = [];
    }
  }
  
  return $types;
}

/**
 * Implements hook_mail().
 */
function ilas_events_mail($key, &$message, $params) {
  switch ($key) {
    case 'registration_confirmation':
      $message['subject'] = t('Registration Confirmation: @event', [
        '@event' => $params['event']['title'],
      ]);
      
      $body = [];
      $body[] = t('Dear @name,', ['@name' => $params['contact']['first_name']]);
      $body[] = '';
      $body[] = t('Thank you for registering for @event.', [
        '@event' => $params['event']['title'],
      ]);
      $body[] = '';
      $body[] = t('Event Details:');
      $body[] = t('Date: @date', [
        '@date' => date('F j, Y g:i a', strtotime($params['event']['start_date'])),
      ]);
      
      if (!empty($params['event']['location'])) {
        $body[] = t('Location: @location', ['@location' => $params['event']['location']]);
      }
      
      $body[] = '';
      $body[] = t('Your confirmation link: @url', [
        '@url' => $params['confirmation_url'],
      ]);
      
      if ($params['participant']['status_id'] == 'On waitlist') {
        $body[] = '';
        $body[] = t('You are currently on the waitlist. We will notify you if a spot becomes available.');
      }
      
      $body[] = '';
      $body[] = t('If you need to cancel your registration, please contact us at events@idaholegalaid.org');
      
      $message['body'] = $body;
      break;
      
    case 'event_reminder':
      $days = $params['days_before'];
      $message['subject'] = t('Reminder: @event is in @days day(s)', [
        '@event' => $params['event']['title'],
        '@days' => $days,
      ]);
      
      $body = [];
      $body[] = t('Dear @name,', ['@name' => $params['contact']['first_name']]);
      $body[] = '';
      $body[] = t('This is a reminder that you are registered for:');
      $body[] = $params['event']['title'];
      $body[] = '';
      $body[] = t('Date: @date', [
        '@date' => date('F j, Y g:i a', strtotime($params['event']['start_date'])),
      ]);
      
      if (!empty($params['event']['location'])) {
        $body[] = t('Location: @location', ['@location' => $params['event']['location']]);
      }
      
      $body[] = '';
      $body[] = t('We look forward to seeing you there!');
      
      $message['body'] = $body;
      break;
      
    case 'waitlist_confirmation':
      $message['subject'] = t('You\'re off the waitlist! - @event', [
        '@event' => $params['event']['title'],
      ]);
      
      $body = [];
      $body[] = t('Dear @name,', ['@name' => $params['contact']['first_name']]);
      $body[] = '';
      $body[] = t('Good news! A spot has opened up for @event and you have been moved from the waitlist to registered.', [
        '@event' => $params['event']['title'],
      ]);
      $body[] = '';
      $body[] = t('Event Details:');
      $body[] = t('Date: @date', [
        '@date' => date('F j, Y g:i a', strtotime($params['event']['start_date'])),
      ]);
      
      $body[] = '';
      $body[] = t('Please confirm your attendance by visiting: @url', [
        '@url' => $params['registration_url'],
      ]);
      
      $message['body'] = $body;
      break;
      
    case 'cancellation_notice':
      $message['subject'] = t('Registration Cancelled: @event', [
        '@event' => $params['event']['title'],
      ]);
      
      $body = [];
      $body[] = t('Dear @name,', ['@name' => $params['contact']['first_name']]);
      $body[] = '';
      $body[] = t('Your registration for @event has been cancelled.', [
        '@event' => $params['event']['title'],
      ]);
      $body[] = '';
      $body[] = t('If this was done in error, please contact us at events@idaholegalaid.org');
      
      $message['body'] = $body;
      break;
      
    case 'event_follow_up':
      $message['subject'] = t('Thank you for attending @event', [
        '@event' => $params['event']['title'],
      ]);
      
      $body = [];
      $body[] = t('Dear @name,', ['@name' => $params['contact']['first_name']]);
      $body[] = '';
      $body[] = t('Thank you for attending @event!', [
        '@event' => $params['event']['title'],
      ]);
      $body[] = '';
      $body[] = t('We hope you found the event valuable and informative.');
      $body[] = '';
      
      if (!empty($params['certificate_url'])) {
        $body[] = t('Your certificate of completion is available at: @url', [
          '@url' => $params['certificate_url'],
        ]);
        $body[] = '';
      }
      
      $body[] = t('We would appreciate your feedback. Please take a moment to complete our survey: @url', [
        '@url' => $params['feedback_url'],
      ]);
      $body[] = '';
      $body[] = t('Stay connected with Idaho Legal Aid Services for future events and updates.');
      
      $message['body'] = $body;
      break;
  }
}

/**
 * Implements hook_civicrm_post().
 */
function ilas_events_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  if ($objectName == 'Event') {
    // Sync CiviCRM event changes back to Drupal if needed
    if (in_array($op, ['create', 'edit'])) {
      $sync_service = \Drupal::service('ilas_events.sync');
      $sync_service->syncEventToNode($objectId);
    }
  }
  
  if ($objectName == 'Participant') {
    // Handle participant registrations
    if ($op == 'create') {
      $notification = \Drupal::service('ilas_events.notification');
      $notification->sendRegistrationConfirmation($objectId);
    }
  }
}