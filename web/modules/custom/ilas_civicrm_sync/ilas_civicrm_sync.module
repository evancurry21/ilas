<?php

/**
 * @file
 * ILAS CiviCRM Sync module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_user_insert().
 */
function ilas_civicrm_sync_user_insert(UserInterface $user) {
  ilas_civicrm_sync_user_to_contact($user, 'create');
}

/**
 * Implements hook_user_update().
 */
function ilas_civicrm_sync_user_update(UserInterface $user) {
  ilas_civicrm_sync_user_to_contact($user, 'update');
}

/**
 * Implements hook_user_delete().
 */
function ilas_civicrm_sync_user_delete(UserInterface $user) {
  // Soft delete in CiviCRM - mark as deleted but keep record
  if ($contact_id = ilas_civicrm_sync_get_contact_id($user->id())) {
    try {
      \Drupal::service('civicrm')->initialize();
      civicrm_api3('Contact', 'create', [
        'id' => $contact_id,
        'is_deleted' => 1,
      ]);
    }
    catch (Exception $e) {
      \Drupal::logger('ilas_civicrm_sync')->error('Failed to soft delete CiviCRM contact: @error', [
        '@error' => $e->getMessage(),
      ]);
    }
  }
}

/**
 * Sync a Drupal user to a CiviCRM contact.
 *
 * @param \Drupal\user\UserInterface $user
 *   The Drupal user entity.
 * @param string $op
 *   The operation: 'create' or 'update'.
 */
function ilas_civicrm_sync_user_to_contact(UserInterface $user, $op = 'update') {
  // Don't sync anonymous users
  if ($user->isAnonymous()) {
    return;
  }

  try {
    \Drupal::service('civicrm')->initialize();
    
    $params = [
      'contact_type' => 'Individual',
      'email' => $user->getEmail(),
    ];

    // Split display name if available
    $display_name = $user->getDisplayName();
    if ($display_name && $display_name != $user->getEmail()) {
      $name_parts = explode(' ', $display_name, 2);
      $params['first_name'] = $name_parts[0];
      if (isset($name_parts[1])) {
        $params['last_name'] = $name_parts[1];
      }
    }
    else {
      // Use email prefix as first name if no display name
      $email_parts = explode('@', $user->getEmail());
      $params['first_name'] = $email_parts[0];
    }

    // Check if contact already exists
    $contact_id = ilas_civicrm_sync_get_contact_id($user->id());
    
    if ($contact_id) {
      $params['id'] = $contact_id;
    }
    else {
      // For new contacts, check if email already exists in CiviCRM
      $existing = civicrm_api3('Contact', 'get', [
        'email' => $user->getEmail(),
        'contact_type' => 'Individual',
        'return' => ['id'],
      ]);
      
      if ($existing['count'] > 0) {
        $contact_id = reset($existing['values'])['id'];
        $params['id'] = $contact_id;
      }
    }

    // Create or update the contact
    $result = civicrm_api3('Contact', 'create', $params);
    
    if (!empty($result['id'])) {
      // Store the mapping
      ilas_civicrm_sync_store_mapping($user->id(), $result['id']);
      
      // Sync user roles to CiviCRM groups
      ilas_civicrm_sync_user_roles_to_groups($user, $result['id']);
      
      \Drupal::logger('ilas_civicrm_sync')->info('Synced user @uid to CiviCRM contact @cid', [
        '@uid' => $user->id(),
        '@cid' => $result['id'],
      ]);
    }
  }
  catch (Exception $e) {
    \Drupal::logger('ilas_civicrm_sync')->error('Failed to sync user to CiviCRM: @error', [
      '@error' => $e->getMessage(),
    ]);
  }
}

/**
 * Get CiviCRM contact ID for a Drupal user ID.
 *
 * @param int $uid
 *   The Drupal user ID.
 *
 * @return int|null
 *   The CiviCRM contact ID or NULL if not found.
 */
function ilas_civicrm_sync_get_contact_id($uid) {
  try {
    \Drupal::service('civicrm')->initialize();
    $result = civicrm_api3('UFMatch', 'get', [
      'uf_id' => $uid,
      'return' => ['contact_id'],
    ]);
    
    if ($result['count'] > 0) {
      return reset($result['values'])['contact_id'];
    }
  }
  catch (Exception $e) {
    // UFMatch might not exist yet
  }
  
  return NULL;
}

/**
 * Store the mapping between Drupal user and CiviCRM contact.
 *
 * @param int $uid
 *   The Drupal user ID.
 * @param int $contact_id
 *   The CiviCRM contact ID.
 */
function ilas_civicrm_sync_store_mapping($uid, $contact_id) {
  try {
    \Drupal::service('civicrm')->initialize();
    
    // Check if mapping already exists
    $existing = civicrm_api3('UFMatch', 'get', [
      'uf_id' => $uid,
    ]);
    
    $params = [
      'uf_id' => $uid,
      'contact_id' => $contact_id,
      'uf_name' => \Drupal::config('system.site')->get('name'),
    ];
    
    if ($existing['count'] > 0) {
      $params['id'] = reset($existing['values'])['id'];
    }
    
    civicrm_api3('UFMatch', 'create', $params);
  }
  catch (Exception $e) {
    \Drupal::logger('ilas_civicrm_sync')->error('Failed to store user mapping: @error', [
      '@error' => $e->getMessage(),
    ]);
  }
}

/**
 * Sync user roles to CiviCRM groups.
 *
 * @param \Drupal\user\UserInterface $user
 *   The Drupal user.
 * @param int $contact_id
 *   The CiviCRM contact ID.
 */
function ilas_civicrm_sync_user_roles_to_groups(UserInterface $user, $contact_id) {
  try {
    \Drupal::service('civicrm')->initialize();
    
    // Get or create groups for Drupal roles
    $role_group_mapping = [];
    foreach ($user->getRoles() as $role_id) {
      if ($role_id == 'authenticated') {
        continue; // Skip the authenticated role
      }
      
      $role = \Drupal::entityTypeManager()->getStorage('user_role')->load($role_id);
      if ($role) {
        $group_name = 'Drupal Role: ' . $role->label();
        
        // Check if group exists
        $existing_group = civicrm_api3('Group', 'get', [
          'title' => $group_name,
        ]);
        
        if ($existing_group['count'] > 0) {
          $group_id = reset($existing_group['values'])['id'];
        }
        else {
          // Create the group
          $group_result = civicrm_api3('Group', 'create', [
            'title' => $group_name,
            'description' => 'Synced from Drupal role: ' . $role_id,
            'is_active' => 1,
            'visibility' => 'User and User Admin Only',
          ]);
          $group_id = $group_result['id'];
        }
        
        // Add contact to group
        civicrm_api3('GroupContact', 'create', [
          'group_id' => $group_id,
          'contact_id' => $contact_id,
          'status' => 'Added',
        ]);
      }
    }
  }
  catch (Exception $e) {
    \Drupal::logger('ilas_civicrm_sync')->error('Failed to sync roles to groups: @error', [
      '@error' => $e->getMessage(),
    ]);
  }
}