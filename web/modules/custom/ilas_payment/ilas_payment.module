<?php

/**
 * @file
 * ILAS Payment Processing module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function ilas_payment_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ilas_payment':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The ILAS Payment Processing module provides secure payment processing and donation management for Idaho Legal Aid Services.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function ilas_payment_theme() {
  return [
    'donation_form' => [
      'variables' => [
        'form' => NULL,
        'campaign' => NULL,
        'suggested_amounts' => [],
      ],
      'template' => 'donation-form',
    ],
    'donation_confirmation' => [
      'variables' => [
        'contribution' => NULL,
        'contact' => NULL,
        'is_recurring' => FALSE,
      ],
      'template' => 'donation-confirmation',
    ],
    'donation_widget' => [
      'variables' => [
        'campaign_id' => NULL,
        'goal' => NULL,
        'raised' => NULL,
        'percentage' => NULL,
      ],
      'template' => 'donation-widget',
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function ilas_payment_page_attachments(array &$attachments) {
  // Add Stripe.js on payment pages
  $route_name = \Drupal::routeMatch()->getRouteName();
  $payment_routes = [
    'ilas_payment.donate',
    'ilas_payment.donate_campaign',
    'ilas_payment.payment_form',
  ];
  
  if (in_array($route_name, $payment_routes)) {
    // Only add Stripe if it's configured
    $config = \Drupal::config('ilas_payment.settings');
    if ($config->get('stripe_enabled')) {
      $attachments['#attached']['library'][] = 'ilas_payment/stripe';
    }
  }
}

/**
 * Implements hook_cron().
 */
function ilas_payment_cron() {
  // Process recurring donations
  $processor = \Drupal::service('ilas_payment.processor');
  $processor->processRecurringDonations();
  
  // Send donation acknowledgments
  $acknowledgment = \Drupal::service('ilas_payment.acknowledgment');
  $acknowledgment->sendPendingAcknowledgments();
}

/**
 * Get financial types for donations.
 */
function ilas_payment_get_financial_types() {
  $types = [];
  
  try {
    \Drupal::service('civicrm')->initialize();
    
    $result = civicrm_api3('FinancialType', 'get', [
      'is_active' => 1,
      'options' => ['limit' => 0],
      'return' => ['id', 'name', 'description'],
    ]);
    
    foreach ($result['values'] as $type) {
      $types[$type['id']] = $type['name'];
    }
  }
  catch (\Exception $e) {
    \Drupal::logger('ilas_payment')->error('Failed to get financial types: @error', [
      '@error' => $e->getMessage(),
    ]);
  }
  
  return $types;
}

/**
 * Get active campaigns.
 */
function ilas_payment_get_campaigns() {
  $campaigns = [];
  
  try {
    \Drupal::service('civicrm')->initialize();
    
    $result = civicrm_api3('Campaign', 'get', [
      'is_active' => 1,
      'options' => ['limit' => 0],
      'return' => ['id', 'title', 'goal_revenue'],
    ]);
    
    foreach ($result['values'] as $campaign) {
      $campaigns[$campaign['id']] = [
        'title' => $campaign['title'],
        'goal' => $campaign['goal_revenue'] ?? 0,
      ];
    }
  }
  catch (\Exception $e) {
    \Drupal::logger('ilas_payment')->error('Failed to get campaigns: @error', [
      '@error' => $e->getMessage(),
    ]);
  }
  
  return $campaigns;
}