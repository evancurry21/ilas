<?php

/**
 * @file
 * ILAS CiviCRM Integration module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\WebformSubmissionInterface;

/**
 * Implements hook_webform_submission_insert().
 */
function ilas_civicrm_webform_submission_insert(WebformSubmissionInterface $webform_submission) {
  $webform_id = $webform_submission->getWebform()->id();
  
  switch ($webform_id) {
    case 'contact_form':
      ilas_civicrm_process_contact_form($webform_submission);
      break;
      
    case 'employment_application':
      ilas_civicrm_process_employment_application($webform_submission);
      break;
  }
}

/**
 * Process contact form submission.
 */
function ilas_civicrm_process_contact_form(WebformSubmissionInterface $submission) {
  try {
    \Drupal::service('civicrm')->initialize();
    
    $data = $submission->getData();
    
    // Create or update contact
    $params = [
      'contact_type' => 'Individual',
      'email' => $data['email'] ?? '',
    ];
    
    // Parse name if provided
    if (!empty($data['name'])) {
      $name_parts = explode(' ', $data['name'], 2);
      $params['first_name'] = $name_parts[0];
      if (isset($name_parts[1])) {
        $params['last_name'] = $name_parts[1];
      }
    }
    
    // Check if contact exists
    $existing = civicrm_api3('Contact', 'get', [
      'email' => $params['email'],
      'contact_type' => 'Individual',
    ]);
    
    if ($existing['count'] > 0) {
      $params['id'] = reset($existing['values'])['id'];
    }
    
    // Create/update contact
    $result = civicrm_api3('Contact', 'create', $params);
    $contact_id = $result['id'];
    
    // Create activity for the inquiry
    $activity_params = [
      'activity_type_id' => 'Contact',
      'subject' => 'Website Contact Form Submission',
      'details' => $data['message'] ?? '',
      'source_contact_id' => $contact_id,
      'target_contact_id' => $contact_id,
      'status_id' => 'Completed',
      'activity_date_time' => date('YmdHis'),
    ];
    
    civicrm_api3('Activity', 'create', $activity_params);
    
    // Log the creation
    \Drupal::logger('ilas_civicrm')->info('Created contact and activity for webform submission @sid', [
      '@sid' => $submission->id(),
    ]);
    
  }
  catch (\Exception $e) {
    \Drupal::logger('ilas_civicrm')->error('Failed to process contact form: @error', [
      '@error' => $e->getMessage(),
    ]);
  }
}

/**
 * Process employment application submission.
 */
function ilas_civicrm_process_employment_application(WebformSubmissionInterface $submission) {
  try {
    \Drupal::service('civicrm')->initialize();
    
    $data = $submission->getData();
    
    // Create or update contact
    $params = [
      'contact_type' => 'Individual',
      'email' => $data['email'] ?? '',
      'first_name' => $data['full_name'] ?? '',
    ];
    
    // Add phone if provided
    if (!empty($data['phone'])) {
      $params['api.Phone.create'] = [
        'phone' => $data['phone'],
        'location_type_id' => 'Home',
        'phone_type_id' => 'Phone',
      ];
    }
    
    // Add address if provided
    if (!empty($data['address'])) {
      $params['api.Address.create'] = [
        'street_address' => $data['address'],
        'location_type_id' => 'Home',
      ];
    }
    
    // Check if contact exists
    $existing = civicrm_api3('Contact', 'get', [
      'email' => $params['email'],
      'contact_type' => 'Individual',
    ]);
    
    if ($existing['count'] > 0) {
      $params['id'] = reset($existing['values'])['id'];
    }
    
    // Create/update contact
    $result = civicrm_api3('Contact', 'create', $params);
    $contact_id = $result['id'];
    
    // Create activity for the application
    $activity_params = [
      'activity_type_id' => 'Application',
      'subject' => 'Employment Application: ' . ($data['position_applied'] ?? 'Unknown Position'),
      'details' => ilas_civicrm_format_application_details($data),
      'source_contact_id' => $contact_id,
      'target_contact_id' => $contact_id,
      'status_id' => 'Scheduled',
      'activity_date_time' => date('YmdHis'),
    ];
    
    // Add custom fields if available
    if (!empty($data['available_start_date'])) {
      $activity_params['custom_available_date'] = $data['available_start_date'];
    }
    
    civicrm_api3('Activity', 'create', $activity_params);
    
    // Add tag for job applicants
    $tag_result = civicrm_api3('Tag', 'get', [
      'name' => 'job_applicant',
    ]);
    
    if ($tag_result['count'] == 0) {
      // Create tag if it doesn't exist
      $tag_result = civicrm_api3('Tag', 'create', [
        'name' => 'job_applicant',
        'label' => 'Job Applicant',
        'used_for' => 'civicrm_contact',
      ]);
    }
    
    $tag_id = reset($tag_result['values'])['id'];
    
    // Apply tag to contact
    civicrm_api3('EntityTag', 'create', [
      'entity_table' => 'civicrm_contact',
      'entity_id' => $contact_id,
      'tag_id' => $tag_id,
    ]);
    
    \Drupal::logger('ilas_civicrm')->info('Created contact and activity for employment application @sid', [
      '@sid' => $submission->id(),
    ]);
    
  }
  catch (\Exception $e) {
    \Drupal::logger('ilas_civicrm')->error('Failed to process employment application: @error', [
      '@error' => $e->getMessage(),
    ]);
  }
}

/**
 * Format application details for activity.
 */
function ilas_civicrm_format_application_details($data) {
  $details = [];
  
  $fields = [
    'position_applied' => 'Position Applied For',
    'available_start_date' => 'Available Start Date',
    'salary_requirements' => 'Salary Requirements',
    'education' => 'Education',
    'experience' => 'Experience',
    'references' => 'References',
  ];
  
  foreach ($fields as $key => $label) {
    if (!empty($data[$key])) {
      $details[] = "<strong>$label:</strong> " . htmlspecialchars($data[$key]);
    }
  }
  
  return implode("<br>\n", $details);
}

/**
 * Implements hook_page_attachments_alter().
 */
function ilas_civicrm_page_attachments_alter(array &$attachments) {
  // Fix CiviCRM resource URLs if loaded through proxy
  if (isset($attachments['#attached']['html_head_link'])) {
    foreach ($attachments['#attached']['html_head_link'] as &$link) {
      if (isset($link[0]['href']) && strpos($link[0]['href'], 'localhost:3000') !== FALSE) {
        $link[0]['href'] = str_replace('https://localhost:3000', 'https://ilas.ddev.site', $link[0]['href']);
      }
    }
  }
  
  // Fix library URLs
  if (isset($attachments['#attached']['library'])) {
    // Process any external libraries that might have wrong URLs
    if (isset($attachments['#attached']['html_head'])) {
      foreach ($attachments['#attached']['html_head'] as &$head_item) {
        if (isset($head_item[0]['#attributes']['href']) && strpos($head_item[0]['#attributes']['href'], 'localhost:3000') !== FALSE) {
          $head_item[0]['#attributes']['href'] = str_replace('https://localhost:3000', 'https://ilas.ddev.site', $head_item[0]['#attributes']['href']);
        }
      }
    }
  }
}

/**
 * Implements hook_civicrm_buildAsset().
 */
function ilas_civicrm_civicrm_buildAsset($asset, &$params, &$mimeType, &$content) {
  // Ensure assets are built with correct URL
  if (strpos($_SERVER['HTTP_HOST'] ?? '', 'localhost') !== FALSE) {
    $_SERVER['HTTP_HOST'] = 'ilas.ddev.site';
    $_SERVER['HTTPS'] = 'on';
  }
}

/**
 * Implements hook_civicrm_coreResourceList().
 */
function ilas_civicrm_civicrm_coreResourceList(&$list, $region) {
  // Fix resource URLs if needed
  foreach ($list as &$resource) {
    if (is_string($resource) && strpos($resource, 'localhost:3000') !== FALSE) {
      $resource = str_replace('https://localhost:3000', 'https://ilas.ddev.site', $resource);
    }
  }
}

/**
 * Implements hook_civicrm_post().
 * 
 * Sync CiviCRM changes back to Drupal.
 */
function ilas_civicrm_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  // Example: Sync contact updates back to Drupal users
  if ($objectName == 'Individual' && in_array($op, ['create', 'edit'])) {
    // Check if this contact has a Drupal user
    try {
      $uf_match = civicrm_api3('UFMatch', 'get', [
        'contact_id' => $objectId,
        'uf_name' => \Drupal::config('system.site')->get('name'),
      ]);
      
      if ($uf_match['count'] > 0) {
        $uid = reset($uf_match['values'])['uf_id'];
        $user = \Drupal\user\Entity\User::load($uid);
        
        if ($user) {
          // Update user email if changed
          if (!empty($objectRef->email) && $user->getEmail() != $objectRef->email) {
            $user->setEmail($objectRef->email);
            $user->save();
          }
        }
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('ilas_civicrm')->error('Failed to sync CiviCRM contact to user: @error', [
        '@error' => $e->getMessage(),
      ]);
    }
  }
}